@model MyNetCore.Model.CodeGenerate.BaseCode
@{
    Layout = null;
}
/**
*┌──────────────────────────────────────────────────────────────┐
*│　描    述：@(Model.ModelDesc)业务逻辑接口                                                    
*│　作    者：@Model.Author                                          
*│　版    本：1.0 使用Razor引擎自动生成                                              
*│　创建时间：@Model.GeneratorTime                            
*└──────────────────────────────────────────────────────────────┘
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using @(Model.ProjectName).IServices;
using @(Model.ProjectName).IRepository;
using @(Model.ProjectName).Repository;
using @(Model.ProjectName).Model.Entity;


namespace @(Model.ProjectName).Services
{
    /// <summary>
    /// @(Model.ModelDesc)业务实现类
    /// </summary>
    [ServiceLifetime()]
    public class @(Model.ModelName)Service : BaseService<@(Model.ModelName), int>, I@(Model.ModelName)Service
    {
        private readonly IFreeSql _fsq;
        private readonly ICommonAttachService _commonAttachService;
        private readonly I@(Model.ModelName)Repository _@(Model.ModelVariableName)Repository;

        public @(Model.ModelName)Service(ILogger<@(Model.ModelName)Service> logger, IFreeSql<DBFlagMain> fsq, ICommonAttachService commonAttachService, @(Model.ModelName)Repository @(Model.ModelVariableName)Repository) : base(@(Model.ModelVariableName)Repository, logger)
        {
            _fsq = fsq;
            _commonAttachService = commonAttachService;
            _@(Model.ModelVariableName)Repository = @(Model.ModelVariableName)Repository;
        }

        /// <summary>
        /// 获取完整的model信息
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public async Task<@(Model.HasView ? Model.ViewClassName : Model.ModelName)> GetModelFullAsync(int id)
        {
            if (id < 0) return new @(Model.HasView ? Model.ViewClassName : Model.ModelName)();
            @{ if (Model.HasView) {
          @: var entity = await _@(Model.ModelVariableName)Repository.GetModelViewAsync<@(Model.ViewClassName)>(id);
              } else { 
          @:   var entity = await _@(Model.ModelVariableName)Repository.GetModelAsync(id);
                } }
            
            if (entity == null) return new @(Model.HasView ? Model.ViewClassName : Model.ModelName)();

                entity.Attachs = await _commonAttachService.GetAttachListAsync(id, typeof(@(Model.ModelName)));

            return entity;

        }

        /// <summary>
        /// 添加或修改数据
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public async Task<@(Model.HasView ? Model.ViewClassName : Model.ModelName)> ModifyAsync(@(Model.HasView ? Model.ViewClassName : Model.ModelName) entity)
        {
            using (var uow = _fsq.CreateUnitOfWork())
            {
                var @(Model.ModelVariableName)Repo = uow.GetRepository<@Model.ModelName>();
                @(Model.ModelVariableName)Repo.UnitOfWork = uow;

                var attachRepo = uow.GetRepository<CommonAttach>();
                attachRepo.UnitOfWork = uow;


                var newEntity = await @(Model.ModelVariableName)Repo.InsertOrUpdateAsync(entity);
                var refModel = typeof(@Model.ModelName).FullName;

                //附件
                string[] fields = { "Attach" };
                await attachRepo.DeleteAsync(p => p.RefId == newEntity.Id && p.RefModel == refModel && fields.Contains(p.Field));

                if (entity.Attachs != null)
                {
                    entity.Attachs.ForEach(item =>
                    {
                        item.AttachId = 0;
                        item.RefId = newEntity.Id;
                        item.RefModel = refModel;
                        item.Field = "Attach";
                    });
                    await attachRepo.InsertAsync(entity.Attachs);
                }

                uow.Commit();
            }

            return entity;
        }

    }
}
